// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum Status {
  IN_PROGRESS
  LIVE
  PLANNED
  SUGGESTION
}

enum Category {
  UI
  UX
  ENHANCEMENT
  BUG
  FEATURE
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime   @default(now())
  username      String?    @unique
  comments      Comment[]
  feedbacks     Feedback[]
  upvotes       Upvote[]
  replyFrom     Reply[]    @relation("replyFrom")
  repliedTo     Reply[]    @relation("repliedTo")
}

model Feedback {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  category    Category
  status      Status    @default(SUGGESTION)
  description String    @db.LongText
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  upvotes     Upvote[]
}

model Upvote {
  createdAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedbackId String
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@id([userId, feedbackId])
}

model Comment {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String   @db.LongText
  replies    Reply[]
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedbackId String
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}

model Reply {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String   @db.LongText
  repliedToId String
  repliedTo   User     @relation(fields: [repliedToId], references: [id], name: "repliedTo", onDelete: Cascade)
  replyFromId String
  replyFrom   User     @relation(fields: [replyFromId], references: [id], name: "replyFrom", onDelete: Cascade)
  commentId   Int
  comment     Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
